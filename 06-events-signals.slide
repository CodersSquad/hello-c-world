Events and Signals
04 Mar 2019
Tags: coders, programming, c

Obed N Munoz
Cloud Software Engineer
obed.n.munoz@ [ gmail | tec ] .com
http://obedmr.com
@_obedmr

* Events

An *event* can be defined as a situation or occurence that is being recognized by a program. An *event* will occur  by one or multiple actions that happened in the execution of the program.

- Event's handling will depend on each program flow and logic.
- An event can be generated by a signal.
- Events can cause new signals.
- Event-driven architecture and development comes from this basic concept.


* File Events
Some applications will require the ability to monitor files or directories in order to determine an event have occured in the specific monitored objects.

*Example:*
A graphical file manager needs to be able to determine when files are added or removed from the directory that is currently being displayed, or a daemon may want to monitor its configuration file in order to know if the file has been changed.

.image images/06/gui.png


* The inotify API: key steps

1. Application calls `inotify_init()` to create an _inotify_ *instance*.

2. The application informs the kernel about which files are of interest by using the `inotify_add_watch()`

3. In order to obtain event notifications, the application performs `read()` operations on the `inotify` file descriptor.

4. When the application has finished monitoring, it closes the `inotify` file descriptor.

.image images/06/watch_descriptors.png


* The inotify API: events

.image images/06/inotify_events.png


* The inotify API: reading events (1/2)

After events have occurred, each read() returns a buffer.

 struct inotify_event {
 	int      wd;       /* Watch descriptor */
 	uint32_t mask;     /* Mask describing event */
 	uint32_t cookie;   /* Unique cookie associating related events (for rename()) */
 	uint32_t len;      /* Size of name field */
 	char     name[];   /* Optional null-terminated name */
 };

Take a look on *inotify/demo_inotify.c* from [[http://man7.org/tlpi/code/][The Linux Programming Interface]].

In a first terminal, run:

 mkdir dir1 dir2
 ./demo_inotify dir1 dir2


* The inotify API: reading events (2/2)

In a second terminal, run:

 cat > dir1/aaa
 Hello World

 # Type Control-D

 mv dir1/aaa dir2/bbb

 mkdir dir2/ddd

 rmdir dir1


* Let's Code: File/Directory Monitor
Follow instructions from [[https://github.com/CodersSquad/ap-labs/tree/master/labs/lab3.1]]


* Signals


* Resources and Credits
This material is genereated thanks to some extracts from following resources:

- The C Programming Language - _Brian_ _W._ _Kernighan_
- The Linux Programming Interface (Chapters 19, 20, 21, 22) - _Michael_Kerrisk_
- [[https://www.gnu.org/software/libc/manual/html_node/Signal-Handling.html][Signal Handling]]
