Pointers and Structures in C
Where all the fun starts
27 Aug 2019
Tags: coders, programming, c

Obed N Munoz
Cloud Software Engineer
obed.n.munoz@ [ gmail | tec ] .com
http://obedmr.com
@_obedmr

* Pointer
A pointer is a variable that contains the address of a variable.

.image images/01/pointer.png

 int x = 1, y = 2, z[10];

 int *ip;         /* ip is a pointer to int */

 ip = &x;         /* ip now points to x */

 y = *ip;         /* y is now 1 */

 *ip = 0;         /* x is now 0 */

 ip = &z[0];      /* ip now points to z[0] */


* Pointers in Functions 1/2

- Arguments by value

 void swap(int x, int y)
 {
    int temp;
    temp = x;
    x = y;
    y = temp;
 }


- Arguments by reference

 void swap(int *px, int *py)
 {
     int temp;
     temp = *px;
     *px = *py;
     *py = temp;
 }

So, what would be used in the `main` function?


* Pointers in Functions 2/2
.image images/01/pointers_functions.png 500 400

* Pointers and Arrays 1/2

 int a[10]; // Defines an array of 10 elements

.image images/01/pointer_array1.png

 int *pa;
 pa = &a[0];

.image images/01/pointer_array2.png

* Pointers and Arrays 2/2

How to access `a`'s  elements from `*pa`

.image images/01/pointer_array3.png

Then,

 *pa == a[0]
 (*p + 1) == a[1]
 (*p + 2) == a[2]
 (*p + n) == a[n]


* Multi-dimensional arrays

- Initialization
 static char daytab[2][13] = {
     {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},
     {0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
 };

- Usage

 /* Get year day from a given year,month and day combination */
 int day_of_year(int year, int month, int day)
 {
     int i, leap;
     leap = year%4 == 0 && year%100 != 0 ¦¦ year%400 == 0;

     for (i = 1; i < month; i++)
         day += daytab[leap][i];
     return day;
 }


* Let's code: year day calculator

From previous example,

- Add the proper error checking mechanisms

- Implement a second *month_day* function that given year and year day, calculate the corresponding  month and the month's day. Use pointers for month and month's day.

  /* month_day function's prototype*/
  void month_day(int year, int yearday, int *pmonth, int *pday)

- [[][Missing link to github]]


* Pointer Arrays

 /* month_name:  return name of n-th month */
 char *month_name(int n) {

    static char *name[] = {
        "Illegal month",
        "January", "February", "March",
        "April", "May", "June",
        "July", "August", "September",
        "October", "November", "December"
    };

    return (n < 1 ¦¦ n > 12) ? name[0] : name[n];
 }


* Pointer vs. Multi-dimensional arrays 1/2

- Multi-dimensional array
 int a[10][20];

- Pointer array
 int *b[10];

What's the difference between *a* and *b*?


* Pointer vs. Multi-dimensional arrays 1/2

- Pointer array

 char *name[] = { "Illegal month", "Jan, "Feb", "Mar" };

.image images/01/pointer_array4.png 180 380

- Multi-dimensional array

 char aname[][15] = { "Illegal month", "Jan", "Feb", "Mar" };

.image images/01/multidimensional_array.png


* Pointers to functions


* Let's code: Generic Merge Sort
- Based on 5.11

* Structures ...
- Declaration of structures
- Usage in function and as parameters
- Arrays of structures
- Self-referencing
- Pointers to structures

* Resources and Credits
This material is genereated thanks to some extracts from following resources:

- *The* *C* *Programming* *Language* (Chapters 5,6) - _Brian_ _W._ _Kernighan_
